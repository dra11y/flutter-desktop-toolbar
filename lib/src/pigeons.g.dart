// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum GroupSelectionMode {
  single,
  multiple,
  momentary,
}

enum ToolbarSpace {
  single,
  flexible,
}

class ToolbarGroup {
  ToolbarGroup({
    required this.items,
    required this.selectionMode,
    this.leadingSpace,
    this.trailingSpace,
    this.isCenterItem,
    this.paletteLabel,
  });

  List<ToolbarItem?> items;
  GroupSelectionMode selectionMode;
  ToolbarSpace? leadingSpace;
  ToolbarSpace? trailingSpace;
  bool? isCenterItem;
  String? paletteLabel;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['items'] = items;
    pigeonMap['selectionMode'] = selectionMode.index;
    pigeonMap['leadingSpace'] = leadingSpace?.index;
    pigeonMap['trailingSpace'] = trailingSpace?.index;
    pigeonMap['isCenterItem'] = isCenterItem;
    pigeonMap['paletteLabel'] = paletteLabel;
    return pigeonMap;
  }

  static ToolbarGroup decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ToolbarGroup(
      items: (pigeonMap['items'] as List<Object?>?)!.cast<ToolbarItem?>(),
      selectionMode: GroupSelectionMode.values[pigeonMap['selectionMode']! as int]
,
      leadingSpace: pigeonMap['leadingSpace'] != null
          ? ToolbarSpace.values[pigeonMap['leadingSpace']! as int]
          : null,
      trailingSpace: pigeonMap['trailingSpace'] != null
          ? ToolbarSpace.values[pigeonMap['trailingSpace']! as int]
          : null,
      isCenterItem: pigeonMap['isCenterItem'] as bool?,
      paletteLabel: pigeonMap['paletteLabel'] as String?,
    );
  }
}

class ToolbarItem {
  ToolbarItem({
    required this.title,
    required this.iconData,
    this.leadingSpace,
    this.trailingSpace,
    this.isCenterItem,
    this.isSelected,
  });

  String title;
  ToolbarItemIconData iconData;
  ToolbarSpace? leadingSpace;
  ToolbarSpace? trailingSpace;
  bool? isCenterItem;
  bool? isSelected;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['title'] = title;
    pigeonMap['iconData'] = iconData.encode();
    pigeonMap['leadingSpace'] = leadingSpace?.index;
    pigeonMap['trailingSpace'] = trailingSpace?.index;
    pigeonMap['isCenterItem'] = isCenterItem;
    pigeonMap['isSelected'] = isSelected;
    return pigeonMap;
  }

  static ToolbarItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ToolbarItem(
      title: pigeonMap['title']! as String,
      iconData: ToolbarItemIconData.decode(pigeonMap['iconData']!)
,
      leadingSpace: pigeonMap['leadingSpace'] != null
          ? ToolbarSpace.values[pigeonMap['leadingSpace']! as int]
          : null,
      trailingSpace: pigeonMap['trailingSpace'] != null
          ? ToolbarSpace.values[pigeonMap['trailingSpace']! as int]
          : null,
      isCenterItem: pigeonMap['isCenterItem'] as bool?,
      isSelected: pigeonMap['isSelected'] as bool?,
    );
  }
}

class SelectedToolbarItem {
  SelectedToolbarItem({
    required this.index,
    required this.item,
    this.group,
  });

  int index;
  ToolbarItem item;
  ToolbarGroup? group;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['index'] = index;
    pigeonMap['item'] = item.encode();
    pigeonMap['group'] = group?.encode();
    return pigeonMap;
  }

  static SelectedToolbarItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SelectedToolbarItem(
      index: pigeonMap['index']! as int,
      item: ToolbarItem.decode(pigeonMap['item']!)
,
      group: pigeonMap['group'] != null
          ? ToolbarGroup.decode(pigeonMap['group']!)
          : null,
    );
  }
}

class ToolbarItemIconData {
  ToolbarItemIconData({
    this.codePoint,
    this.fontFamily,
  });

  int? codePoint;
  String? fontFamily;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['codePoint'] = codePoint;
    pigeonMap['fontFamily'] = fontFamily;
    return pigeonMap;
  }

  static ToolbarItemIconData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ToolbarItemIconData(
      codePoint: pigeonMap['codePoint'] as int?,
      fontFamily: pigeonMap['fontFamily'] as String?,
    );
  }
}

class _ToolbarFlutterApiCodec extends StandardMessageCodec{
  const _ToolbarFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SelectedToolbarItem) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarGroup) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarItem) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarItem) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarItemIconData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return SelectedToolbarItem.decode(readValue(buffer)!);
      
      case 129:       
        return ToolbarGroup.decode(readValue(buffer)!);
      
      case 130:       
        return ToolbarItem.decode(readValue(buffer)!);
      
      case 131:       
        return ToolbarItem.decode(readValue(buffer)!);
      
      case 132:       
        return ToolbarItemIconData.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class ToolbarFlutterApi {
  static const MessageCodec<Object?> codec = _ToolbarFlutterApiCodec();

  void didSelectItem(SelectedToolbarItem item);
  static void setup(ToolbarFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ToolbarFlutterApi.didSelectItem', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.ToolbarFlutterApi.didSelectItem was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SelectedToolbarItem? arg_item = (args[0] as SelectedToolbarItem?);
          assert(arg_item != null, 'Argument for dev.flutter.pigeon.ToolbarFlutterApi.didSelectItem was null, expected non-null SelectedToolbarItem.');
          api.didSelectItem(arg_item!);
          return;
        });
      }
    }
  }
}

class _ToolbarHostApiCodec extends StandardMessageCodec{
  const _ToolbarHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SelectedToolbarItem) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarGroup) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarItem) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToolbarItemIconData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return SelectedToolbarItem.decode(readValue(buffer)!);
      
      case 129:       
        return ToolbarGroup.decode(readValue(buffer)!);
      
      case 130:       
        return ToolbarItem.decode(readValue(buffer)!);
      
      case 131:       
        return ToolbarItemIconData.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ToolbarHostApi {
  /// Constructor for [ToolbarHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ToolbarHostApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ToolbarHostApiCodec();

  Future<bool> setItems(List<Object?> arg_items) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ToolbarHostApi.setItems', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_items]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> setSelected(ToolbarItem arg_item) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ToolbarHostApi.setSelected', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_item]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }
}
